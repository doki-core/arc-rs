@export
VomlParser = {statements:Statement} $;

Statement =
	@:ScopeNode |
	@:KeyValueNode
	;

KeyValueNode =
	key:KeyNode '=' value:ValueNode;

KeyNode = path:KeyNodeItem {Dot path:KeyNodeItem};


@position
KeyNodeItem =
	@:IdentifierNode |
	@:IntegerNode |
	@:StringNode
	;


ValueNode =
	@:TableNode |
	@:SpecialNode |
	@:NumberNode |
	@:StringNode
	;

ScopeNode = '^' namespace:NamespaceNode;

TableNode = [hint:IdentifierNode] (
	'(' {items:TableItem} ')' |
	'[' {items:TableItem} ']' |
	'{' {items:TableItem} '}'
) ;

TableItem =
	@:KeyValueNode |
	@:ValueNode |
	@:Split
	;



@position
StringNode = [hint:IdentifierNode] '\"' '\"';

@position
@no_skip_ws
NumberNode = num:Num [hint:IdentifierNode];

@string
@position
@no_skip_ws
Num = ['+'|'-'] {'0'..'9'}+ [Dot {'0'..'9'}+];

@string
@position
@no_skip_ws
IntegerNode = '0' | '1'..'9' {'0'..'9'}+;

@position
NamespaceNode = path:IdentifierNode {Dot path:IdentifierNode};

@string
@position
@no_skip_ws
IdentifierNode = (XID_START | '_') {XID_CONTINUE};

@string
@position
SpecialNode = 'null' | 'default' | 'true' | 'false';


@char
@check(unicode_ident::is_xid_start)
XID_START = char;

@char
@check(unicode_ident::is_xid_continue)
XID_CONTINUE = char;

@char
Dot = '.' | '。';

@char
Split = ';' | ',' | '，';